x = read.csv("test.csv",header =TRUE)
c
x
x
class(x)
predict_cl(x)
install("bitwise")
setwd("~/")
install("bitwise")
library(bitwise)
predict_cl(x)
install("bitwise")
library(bitwise)
predict_cl(x)
install("bitwise")
library(bitwise)
predict_cl(x)
install("bitwise")
library(bitwise)
predict_cl(x)
document()
load_all()
setwd("~/")
load_all()
setwd("~/bitwise")
load_all()
document()
document()
loadNamespace()
loadNamespace("bitwisse")
loadNamespace("bitwise")
loadNamespace(bitwise)
loadNamespace("bitwise")
library(roxygen2)
document("bitwise")
document()
document()
install("conceptMastery_v2")
setwd("C:/Users/user/Desktop")
install("conceptMastery_v2")
install.packages("RcppRoll")
install.packages("RcppRoll")
install("conceptMastery_v2")
setwd("~/")
install("bitwise")
library(bitwise)
predict_cl(x)
install("bitwise")
library(bitwise)
predict_cl(x)
install("bitwise")
install("bitwise")
library(bitwise)
predict_cl(x)
install("bitwise")
library(bitwise)
predict_cl(x)
install("bitwise")
library(bitwise)
predict_cl(x)
install("bitwise")
library(bitwise)
predict_cl(x)
setwd("~/bitwise")
# predicting the cluster
predict_cl <- function(input){
#input can either be csv file or data
newdata <- if(is.character(input) && file.exists(input)){
read.csv(input)
} else {
as.data.frame(input)
}
stopifnot("Correct.Step.Duration..sec." %in% names(newdata))
stopifnot("Error.Step.Duration..sec."  %in% names(newdata))
stopifnot("Incorrects" %in% names(newdata))
stopifnot("Hints" %in% names(newdata))
stopifnot("Corrects" %in% names(newdata))
stopifnot("Opportunity.SubSkills." %in% names(newdata))
stopifnot("Correct.First.Attempt" %in% names(newdata))
library(stats)
newdata = scale(newdata[,c(3:15)])
newdata_pca = stats::predict(pca, newdata)
#Min Distance
PC1 =c(0.5703497 ,-1.1556615, -0.6365549,0.8070864,6.118324)
PC2 = c(1.0005320,0.4970475,-0.2136389,-2.3633537,1.528501)
centroid_pca_1 = data.frame(cbind(PC1,PC2))
points = rbind(centroid_pca_1,newdata_pca[,c(PC1,PC2)])
dist_matrix = dist(points)
dist_matrix = as.matrix(dist_matrix)
dist_matrix = as.array(dist_matrix)
dist_matrix = dist_matrix[1:5,]
c_index =  which.min(dist_matrix[,6])
#prediction by predict_clust
newdata$cluster_number <- c_index
return(newdata)
}
save(predict_cl, file = "/man/predict_cl.rds")
save(predict_cl, file = "man/predict_cl.rds")
save(predict_cl, file = "man/predict_cl.rda")
setwd("~/")
install("bitwise")
library(bitwise)
predict_cl(x)
load("~/bitwise/man/pca.rda")
class(pca)
x = predict(pca,x)
library(caret)
library(e1071)
setwd("C:/Users/user/Desktop/PCA")
# PCA
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
# Applying PCA
install.packages('caret')
library(caret)
install.packages('e1071')
library(e1071)
pca = preProcess(x = training_set[-14], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
# Fitting SVM to the Training set
install.packages('e1071')
library(e1071)
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'SVM (Test set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
install.packages("e1071")
install.packages("e1071")
View(pca)
x = predict(pca, x)
newdata_pca = stats::predict(pca, newdata)
training_set = predict(pca, training_set)
training_set = predict(pca, training_set)
setwd("C:/Users/user/Desktop/PCA")
# PCA
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
# Applying PCA
#install.packages('caret')
library(caret)
#install.packages('e1071')
library(e1071)
pca = preProcess(x = training_set[-14], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
newdata_pca = centroid_pca_1[1,]+0.1
PC1 =c(0.5703497 ,-1.1556615, -0.6365549,0.8070864,6.118324)
PC2 = c(1.0005320,0.4970475,-0.2136389,-2.3633537,1.528501)
centroid_pca_1 = data.frame(cbind(PC1,PC2))
newdata_pca = centroid_pca_1[1,]+0.1
newdata_pca
library(devtools)
setwd("~/")
install("bitwise")
library(bitwise)
install("bitwise")
library(bitwise)
predict_cl(newdata_pca)
install("bitwise")
library(bitwise)
predict_cl(newdata_pca)
# PCA
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
# Applying PCA
#install.packages('caret')
library(caret)
#install.packages('e1071')
library(e1071)
pca = preProcess(x = training_set[-14], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
setwd("C:/Users/user/Desktop/PCA")
# PCA
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
# Applying PCA
#install.packages('caret')
library(caret)
#install.packages('e1071')
library(e1071)
pca = preProcess(x = training_set[-14], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
setwd("C:/Users/user/Desktop")
setwd("C:/Users/user/Desktop")
d2 = read.csv("d5.csv",header =TRUE)
#load("d2.rda")
d2$X =NULL
d2 = na.omit(d2)
d3 = d2
d3$PH =NULL
# Feature Scaling
d2_scale = scale(d2[,c(3:15)])
d2_new = d2
d2_new[,c(3:15)] =d2_scale
prin_comp <- prcomp(d2_new[,c(3:15)])
View(prin_comp)
pca1 = prin_comp
setwd("~/bitwise")
save(pca1,file = "data/pca1.rds")
save(pca1,file = "man/pca1.rds")
setwd("~/")
setwd("~/")
install("bitwise")
library(bitwise)
setwd("C:/Users/user/Desktop")
x = read.csv("test.csv",header =TRUE)
colnames(x)
class(x)
predict_cl(x)
setwd("~/")
install("bitwise")
library(bitwise)
predict_cl(x)
x =as.data.frame(x)
x
predict_cl(x)
x[c(3:15)]
install("bitwise")
library(bitwise)
predict_cl(x)
install("bitwise")
library(bitwise)
predict_cl(x)
y = predict(pca1,x)
y
y = y[c(PC1,PC2)]
y = y[,c(PC1,PC2)]
y = y[c(1,2)]
y
install("bitwise")
library(bitwise)
predict_cl(x)
# Applying PCA
#install.packages('caret')
library(caret)
install.packages("caret")
# Applying PCA
#install.packages('caret')
library(caret)
install.packages("bindrcpp")
# Applying PCA
#install.packages('caret')
library(caret)
setwd("C:/Users/user/Desktop/PCA")
# PCA
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
# Applying PCA
#install.packages('caret')
library(caret)
#install.packages('e1071')
library(e1071)
pca = preProcess(x = training_set[-14], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
y = predict(pca,x)
y = predict(pca,x[c(3:15)])
y = predict(pca,x[,c(3:15)])
z = scale(x[c(3:15)])
y = predict(pca,z[,c(3:15)])
z
y = predict(pca,z)
z = as.data.frame(z)
y = predict(pca,z)
z
PC1 =c(0.5703497 ,-1.1556615, -0.6365549,0.8070864,6.118324)
PC2 = c(1.0005320,0.4970475,-0.2136389,-2.3633537,1.528501)
centroid_pca_1 = data.frame(cbind(PC1,PC2))
centroid_pca_1[,c(PC1,PC2)]
centroid_pca_1[,c("PC1","PC2")]
setwd("~/")
x
dim(x)
install("bitwise")
library(bitwise)
predict_cl(x)
nedata =x
newdata =x
class(newdata)
newdata
newdata[c(3:15)] = scale(newdata[c(3:15)])
newdata
scale(2)
newdata =nedata
newdata
newdata_pca = predict(pca, newdata[c(3:15)])
load("~/bitwise/data/pca.rda")
load("~/bitwise/data/pca.rda")
a = read.table(file = "clipboard",header =TRUE,sep = ',')
a
a = as.data.frame(a)
a
a = read.table(file = "clipboard",header =TRUE)
a
class(a)
b= predict(pca,a)
View(a)
b
install("bitwise")
library(bitwise)
predict_cl(a)
install("bitwise")
library(bitwise)
predict_cl(a)
c =predict_cl(a)
c
install("bitwise")
library(bitwise)
predict_cl(a)
View(x)
View(pca)
mean = pca[["mean"]]
setwd("C:/Users/user/Desktop")
x = read.csv("d5.csv",header =TRUE)
head = x
head(x)
mean = colMeans(x[c(3:15)])
mean = sapply(x[c(3:15)], mean)
mean = sapply(x[,c(3:15)], mean)
mean = sapply(x[,c(3:15)],2, mean)
mean = apply(x[,c(3:15)],2, mean)
mean = apply(x[,c(3:15)],1, mean)
x[c(1,2,3,17)] =NULL
mean =colMeans(x)
sd = sd(x)
sd = apply(x,2,sd)
colnames(x)
variables = colnames(x)
setwd("~/bitwise")
save(variables,file = "data/variables.rda")
save(mean,file = "data/mean.rda")
save(sd,file = "data/sd.rda")
PC1 =c(0.5703497 ,-1.1556615, -0.6365549,0.8070864,6.118324)
PC2 = c(1.0005320,0.4970475,-0.2136389,-2.3633537,1.528501)
centroid_pca_1 = data.frame(cbind(PC1,PC2))
save(centroid_pca_1,file = "data/centroid_pca_1.rda")
y
x
a
setwd("~/")
library("bitwise")
install("bitwise")
x = read.table(file = "clipboard",header =TRUE)
x = read.table(file = "clipboard",header =TRUE)
setwd("C:/Users/user/Desktop")
x = read.csv("test.csv",header =TRUE)
x
library(bitwise)
variables
mean
class(mean)
class(mean)
class(sd)
sd
x
setwd("~/")
install("bitwise")
library(bitwise)
setwd("~/bitwise/data")
rm *.rdb
remove.packages("bitwise")
setwd("~/")
library(devtools)
install("bitwise")
library(bitwise)
setwd("C:/Users/user/Desktop")
x = read.csv("test.csv", header =TRUE)
predict_cl(x)
library(caret)
predict_cl(x)
mean= c(3.0677659,5.8675305, 0.7447891, 0.2317014,1.0252060, 48.2542414 ,11.4030538,24.5055744, 0.7750848 ,1.1456617 ,0.5647116 ,0.9466796,8.9352964)
sd = c(  10.5229614    ,        23.6043839 ,
2.8453583    ,        0.8347736 ,
1.4038370    ,     117.3577202 ,
35.1267237  ,     45.4824252 ,
0.4175771    ,     1.2263231 ,
0.7206431     ,    0.2246989 ,
25.1374324 )
variables = c(  "Correct.Step.Duration..sec." ,"Error.Step.Duration..sec.",
"Incorrects"                  ,"Hints" ,
"Corrects"                    ,"Opportunity.SubSkills." ,
"Opportunity.KTracedSkills."  ,"Opportunity.Rules." ,
"Correct.First.Attempt"       ,"count_subskill" ,
"count_tracedskill"           ,"count_rules"  ,
"Step.Duration..sec."        )
save(mean, file = "data/mean.rda")
setwd("~/bitwise")
save(mean, file = "data/mean.rda")
save(variables, file = "data/variables.rda")
save(sd, file = "data/sd.rda")
library("bitwise", lib.loc="~/R/win-library/3.4")
remove.packages("bitwise", lib="~/R/win-library/3.4")
setwd("~/")
library(devtools)
install("bitwise")
library(bitwise)
x =read.csv("test.csv",header =TRUE)
setwd("C:/Users/user/Desktop")
x =read.csv("test.csv",header =TRUE)
predict_cl(x)
x
predict_cl(x)
setwd("~/")
install("bitwise")
library(bitwise)
predict_cl(x)
setwd("~/")
install_github("bs-2011/bitwise")
install_github("bs-2011/bitwise")
setwd("~/bitwise")
install_github("bs-2011/bitwise")
install_github("bs-2011/bitwise")
setwd("~/bitwise")
install_github("bs-2011/bitwise")
setwd("~/")
install_github("bs-2011/bitwise")
